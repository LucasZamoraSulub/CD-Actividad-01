version: 2.1

jobs:
  # Job para la ejecución de pruebas unitarias
  test:
    docker:
      - image: circleci/node:14 # Usamos la imagen oficial de Node.js para ejecutar pruebas
    steps:
      - checkout # Clona el repositorio en la máquina de CircleCI
      - run:
          name: "Instalar dependencias"
          command: npm install # Instalar las dependencias necesarias
      - run:
          name: "Ejecutar pruebas unitarias"
          command: npm test # Ejecutar las pruebas definidas en el archivo `package.json`

  # Job para las pruebas de regresión
  regression_tests:
    docker:
      - image: circleci/node:14 # Usamos la misma imagen de Node.js
    steps:
      - checkout
      - run:
          name: "Instalar dependencias"
          command: npm install
      - run:
          name: "Ejecutar pruebas de regresión"
          command: npm run regression # Comando que ejecuta las pruebas de regresión

  # Job para las pruebas de rendimiento
  performance_tests:
    docker:
      - image: circleci/node:14 # Usamos la imagen oficial de Node.js para rendimiento
    steps:
      - checkout
      - run:
          name: "Instalar dependencias"
          command: npm install
      - run:
          name: "Ejecutar pruebas de rendimiento"
          command: npm run performance # Comando que ejecuta las pruebas de rendimiento

  # Job para el despliegue a preproducción (solo un ejemplo, no se hace despliegue real)
  deploy:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - run:
          name: "Instalar dependencias"
          command: npm install
      - run:
          name: "Simular despliegue"
          command: echo "Despliegue realizado en preproducción"

workflows:
  version: 2
  # Definimos el flujo de trabajo que ejecutará los trabajos en el orden deseado
  build_and_deploy:
    jobs:
      - test # Primero se ejecutan las pruebas unitarias
      - regression_tests:
          requires:
            - test # Las pruebas de regresión dependen de que las pruebas unitarias pasen
      - performance_tests:
          requires:
            - regression_tests # Las pruebas de rendimiento dependen de las de regresión
      - deploy:
          requires:
            - performance_tests # El despliegue depende de que las pruebas de rendimiento pasen
